<?xml version="1.0"?>
<launch>
    <arg name="robot_name"            default="diablo"/>
    <arg name="use_sim_time"          default="true"/>
    <arg name="gui"                   default="true"/>
    <arg name="headless"              default="false"/>
    <arg name="world_name"			  default="$(find diablo_navigation)/worlds/obstacle2.world" />
    <arg name="paused"                default="false"/>
    <arg name="ros_control_file"      default="$(find diablo_simulation)/config/diablo_control.yaml" />
    <arg name="world_init_x"          default="0.0" />
    <arg name="world_init_y"          default="0.0" />
    <arg name="world_init_z"          default="0.6" />
    <arg name="world_init_heading"    default="0.0" />
    <arg name="respawn_controller"    default="false"/>


    <arg name="description_name"           default="robot_description"/>
    <arg name="description_file"           default="$(find diablo_navigation)/urdf/diablo.urdf"/>
    <env name="GAZEBO_MODEL_PATH"          value="${GAZEBO_MODEL_PATH}:$(find diablo_navigation)/models"/> 

    <!-- this should be only called once on multi-robot simulation -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(arg world_name)"/>
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- RVIZ Visualization -->

    <param name="robot_description" command="$(find xacro)/xacro --inorder $(find diablo_navigation)/urdf/diablo.xacro"/>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
    
    <node name="base_to_velodyne" pkg="tf" type="static_transform_publisher" args="0 0 0.5 0 0 0 base_link velodyne 100"/>

    <!-- Manual Keyboard Control -->
    <remap from="/cmd_vel" to="/diablo/vel_cmd"/>
    <node name="keyboard" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen" launch-prefix="xterm -e"/>

    <!-- Pointcloud To Laserscan -->
    <node name="pointcloud_to_laserscan" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node">
        <remap from="cloud_in" to="/velodyne_points"/>
        <!-- <param name="angle_increment" value="0.005"/> -->
    </node>

    <!-- Pseudo-Odometry using laser_scan_matcher -->
    <!-- <remap from="/cloud" to="/velodyne_points"/> -->
    <node pkg="laser_scan_matcher" type="laser_scan_matcher_node"
    name="laser_scan_matcher_node" output="log">
        <param name="fixed_frame" value="odom"/>
        <param name="base_frame" value="base_footprint"/>
    </node>
</launch>
